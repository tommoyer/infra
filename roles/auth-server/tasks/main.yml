---
# tasks file for auth-server

- name: Install packages
  ansible.builtin.package:
    name:
      - debconf-utils
    state: latest

- name: Set slapd/password2
  ansible.builtin.debconf:
    name: slapd
    question: slapd/password2
    value: 'admin'
    vtype: password

- name: Set slapd/internal/adminpw
  ansible.builtin.debconf:
    name: slapd
    question: slapd/internal/adminpw
    value: 'admin'
    vtype: password

- name: Set slapd/password1
  ansible.builtin.debconf:
    name: slapd
    question: slapd/password1
    value: 'admin'
    vtype: password

- name: Set slapd/internal/generated_adminpw
  ansible.builtin.debconf:
    name: slapd
    question: slapd/internal/generated_adminpw
    value: 'admin'
    vtype: password

- name: Set slapd/postinst_error
  ansible.builtin.debconf:
    name: slapd
    question: slapd/postinst_error
    value: ''
    vtype: note

- name: Set slapd/invalid_config
  ansible.builtin.debconf:
    name: slapd
    question: slapd/invalid_config
    value: 'true'
    vtype: boolean

- name: Set slapd/upgrade_slapcat_failure
  ansible.builtin.debconf:
    name: slapd
    question: slapd/upgrade_slapcat_failure
    value: ''
    vtype: error

- name: Set shared/organization
  ansible.builtin.debconf:
    name: slapd
    question: shared/organization
    value: '{{ ldap_org_name }}'
    vtype: string

- name: Set slapd/domain
  ansible.builtin.debconf:
    name: slapd
    question: slapd/domain
    value: '{{ ldap_domain }}'
    vtype: string

- name: Set slapd/password_mismatch
  ansible.builtin.debconf:
    name: slapd
    question: slapd/password_mismatch
    value: ''
    vtype: note

- name: Set slapd/dump_database
  ansible.builtin.debconf:
    name: slapd
    question: slapd/dump_database
    value: 'when needed'
    vtype: select

- name: Set slapd/no_configuration
  ansible.builtin.debconf:
    name: slapd
    question: slapd/no_configuration
    value: 'false'
    vtype: boolean

- name: Set slapd/purge_database
  ansible.builtin.debconf:
    name: slapd
    question: slapd/purge_database
    value: 'false'
    vtype: boolean

- name: Set slapd/move_old_database
  ansible.builtin.debconf:
    name: slapd
    question: slapd/move_old_database
    value: 'true'
    vtype: boolean

- name: Set slapd/dump_database_destdir
  ansible.builtin.debconf:
    name: slapd
    question: slapd/dump_database_destdir
    value: '/var/backups/slapd-VERSION'
    vtype: string

- name: Install packages
  ansible.builtin.package:
    name:
      - slapd
      - ldap-utils
      - python3-ldap
      - ldapscripts
    state: latest

- name: Generate slapd config
  ansible.builtin.template:
    src: config.ldif.j2
    dest: /root/config.ldif
    owner: root
    group: root
    mode: 0600

- name: Stop slapd
  ansible.builtin.systemd_service:
    name: slapd
    state: stopped

- name: Remove existing slapd config
  ansible.builtin.file:
    path: /etc/ldap/slapd.d
    state: absent

- name: Create base config directory
  ansible.builtin.file:
    path: /etc/ldap/slapd.d
    state: directory
    owner: openldap
    group: openldap

- name: Load slapd config
  ansible.builtin.command:
    argv:
      - /usr/sbin/slapadd
      - -F
      - /etc/ldap/slapd.d
      - -b
      - cn=config
      - -l
      - /root/config.ldif

- name: Update file permissions for slapd config
  ansible.builtin.file:
    path: /etc/ldap/slapd.d
    state: directory
    recurse: yes
    owner: openldap
    group: openldap

- name: Start and enable slapd
  ansible.builtin.systemd_service:
    name: slapd
    state: started
    enabled: true

- name: Set search base
  ansible.builtin.lineinfile:
    path: /etc/ldap/ldap.conf
    state: present
    regexp: '^#BASE'
    line: 'BASE {{ ldap_base_dn }}'

- name: Set URI
  ansible.builtin.lineinfile:
    path: /etc/ldap/ldap.conf
    state: present
    regexp: '^#URI'
    line: 'URI {{ ldap_uri }}'

- name: Clean up files
  ansible.builtin.file:
    path: /root/config.ldif
    state: absent

- name: Create users OU
  community.general.ldap_entry:
    dn: '{{ ldap_users_ou }},{{ ldap_base_dn }}'
    objectClass: organizationalUnit
    bind_dn: '{{ ldap_admin_cn }},{{ ldap_base_dn }}'
    bind_pw: '{{ ldap_admin_password }}'

- name: Create groups OU
  community.general.ldap_entry:
    dn: '{{ ldap_groups_ou }},{{ ldap_base_dn }}'
    objectClass: organizationalUnit
    bind_dn: '{{ ldap_admin_cn }},{{ ldap_base_dn }}'
    bind_pw: '{{ ldap_admin_password }}'

- name: Generate ladpscripts config
  ansible.builtin.template:
    src: ldapscripts.conf.j2
    dest: /etc/ldapscripts/ldapscripts.conf
    owner: root
    group: root
    mode: 0600

- name: Setup user template
  ansible.builtin.copy:
    src: ldapadduser.template
    dest: /etc/ldapscripts/ldapadduser.template
    owner: root
    group: root
    mode: 0600

- name: Create password file
  ansible.builtin.shell: echo -n {{ ldap_admin_password }} > /etc/ldapscripts/ldapscripts.passwd

- name: Restart slapd
  ansible.builtin.systemd_service:
    name: slapd
    state: restarted

- name: Create base config directory
  ansible.builtin.file:
    path: /etc/systemd/system/docker.service.d/
    state: directory
    owner: root
    group: root
    mode: 0644

- name: Setup docker for remote connections
  ansible.builtin.template:
    src: docker-override.conf.j2
    dest: /etc/systemd/system/docker.service.d/override.conf
    owner: root
    group: root
    mode: 0644

- name: Restart docker
  ansible.builtin.systemd_service:
    state: restarted
    daemon_reload: true
    name: docker

- name: Pull default Docker image
  community.docker.docker_image:
    name: "{{ ca_container_image }}"
    source: pull

- name: Create CA container
  community.docker.docker_container:
    name: '{{ ca_container_name }}'
    image: '{{ ca_container_image }}'
    env:
      DOCKER_STEPCA_INIT_NAME: '{{ ca_name }}'
      DOCKER_STEPCA_INIT_DNS_NAMES: ' {{ ca_dns_names }}'
      DOCKER_STEPCA_INIT_PASSWORD: '{{ ca_admin_password }}'
    published_ports:
      - '{{ ca_listen_port }}:{{ ca_listen_port }}'
    volumes:
      - step:/home/step
    state: started

- name: Wait for CA to bootstrap
  community.docker.docker_container_exec:
    container: '{{ ca_container_name }}'
    docker_host: '{{ ca_docker_host }}:{{ docker_host_port }}'
    command: /bin/bash -c 'while [ ! -f /home/step/certs/root_ca.crt ]; do echo -n . ; sleep 2; done'

- name: Get list of provisioners
  community.docker.docker_container_exec:
    container: '{{ ca_container_name }}'
    docker_host: '{{ ca_docker_host }}:{{ docker_host_port }}'
    command: /bin/bash -c "step ca provisioner list --ca-url https://localhost:{{ ca_listen_port }}"
  register: ca_provisioners

- name: Add ACME provisioner
  community.docker.docker_container_exec:
    container: '{{ ca_container_name }}'
    docker_host: '{{ ca_docker_host }}:{{ docker_host_port }}'
    command: /bin/bash -c "step ca provisioner add acme --type ACME --ca-url https://localhost:{{ ca_listen_port }}"
  when: '"\"type\": \"ACME\"" not in ca_provisioners.stdout'
  register: acme_added

- name: Reload CA config
  community.docker.docker_container_exec:
    container: '{{ ca_container_name }}'
    docker_host: '{{ ca_docker_host }}:{{ docker_host_port }}'
    command: /bin/bash -c "kill -HUP 1"
  when: acme_added.changed

- name: Bootstrap CA
  ansible.builtin.include_role:
    name: ca-client
